// Package <@.ctx.package> is generated automatically by goal toolkit.
// Please, do not edit it manually.
package <@.ctx.package>

import (
	"net/http"
	<@if not .ctx.num>"net/url"<@end>

	<@range $i, $v := .ctx.parents>
	<@if $v.Import><@$v.Package> "<@joinImp $.ctx.outputImport $v.Import>"<@end><@end>
	contr "<@.ctx.import>"

	"github.com/colegion/goal/strconv"
)

// <@.ctx.name> is an insance of t<@.ctx.name> that is automatically generated from <@.ctx.name> controller
// being found at "<@.ctx.import>/<@base .ctx.controller.File>",
// and contains methods to be used as handler functions.<@template "printComments" dict (set "comments" .ctx.controller.Comments)>
var <@.ctx.name> t<@.ctx.name>

<@if not .ctx.num>
	// context stores names of all controllers and packages of the app.
	var context = url.Values{}
<@end>

// t<@.ctx.name> is a type with handler methods of <@.ctx.name> controller.
type t<@.ctx.name> struct {
}

// New allocates (<@.ctx.import>).<@.ctx.name> controller,<@if .ctx.parents>
// initializes its parents; then returns the controller.<@else>
// then returns it.<@end>
func (t t<@.ctx.name>) New(w http.ResponseWriter, r *http.Request, ctr, act string) *contr.<@.ctx.name> {
	c := &contr.<@.ctx.name>{<@range $i, $v := .ctx.controller.Fields>
		<@if eq $v.Type "response"><@$v.Name>: w,<@end>
		<@if eq $v.Type "request"><@$v.Name>: r,<@end>
		<@if eq $v.Type "controller"><@$v.Name>: ctr,<@end>
		<@if eq $v.Type "action"><@$v.Name>: act,<@end>
	<@end>}<@range $i, $v := .ctx.parents>
	c.<@$v.Name> = <@$v.Package "."><@$v.Name>.New(w, r, ctr, act)<@end>
	return c
}

// <@.ctx.before> is a method that is started by every handler function at the very beginning
// of their execution phase no matter what.
func (t t<@.ctx.name>) <@.ctx.before>(c *contr.<@.ctx.name>, w http.ResponseWriter, r *http.Request) http.<@.ctx.actionInterface> {
	<@if .ctx.parents>// Execute magic <@.ctx.before> actions of embedded controllers.<@range $i, $v := .ctx.parents>
			if h := <@$v.Package "."><@$v.Name>.<@$.ctx.before>(c.<@$v.Name>, w, r); h != nil {
				return h
			}
		<@end>
	<@end>

	<@if .ctx.controller.Before>// Call magic <@.ctx.before> action of (<@.ctx.import>).<@.ctx.before>.
		if h<@.ctx.controller.IgnoredArgs .ctx.controller.Before> := c.<@.ctx.before>(<@range $i, $v := .ctx.controller.Before.Params>
				<@$.ctx.strconv.Render "strconv" "r.Form" $v>,
		<@end>); h != nil {
			return h
		}
	<@end>

	return nil
}

// <@.ctx.after> is a method that is started by every handler function at the very end
// of their execution phase no matter what.
func (t t<@.ctx.name>) <@.ctx.after>(c *contr.<@.ctx.name>, w http.ResponseWriter, r *http.Request) (h http.<@.ctx.actionInterface>) {
	<@if .ctx.controller.After>
		// Call magic <@.ctx.after> method of (<@.ctx.import>).<@.ctx.name>.
		defer func() {
			if h == nil {
				h<@.ctx.controller.IgnoredArgs .ctx.controller.After> = c.<@.ctx.after>(<@range $i, $v := .ctx.controller.After.Params>
					<@$.ctx.strconv.Render "strconv" "r.Form" $v>,
				<@end>)
			}
		}()
	<@end>
	<@if .ctx.parents>
		// Execute magic <@.ctx.after> methods of embedded controllers.
		<@range $i, $v := .ctx.parents>
			if h = <@$v.Package "."><@$v.Name>.<@$.ctx.after>(c.<@$v.Name>, w, r); h != nil {
				return h
			}
		<@end>
	<@end>
	return
}

<@range $i, $f := .ctx.controller.Actions>
	// <@$f.Name> is a handler that was generated automatically.
	// It calls <@$.ctx.before>, <@$.ctx.after> methods, and <@$f.Name> action found at
	// <@join $.ctx.import (base $f.File)>
	// in appropriate order.<@template "printComments" dict (set "comments" $f.Comments)>
	func (t t<@$.ctx.name>) <@$f.Name>(w http.ResponseWriter, r *http.Request) {
		var h http.Handler
		c := <@$.ctx.name>.New(w, r, "<@$.ctx.name>", "<@$f.Name>")
		defer func() {
			if h != nil {
				h.ServeHTTP(w, r)
			}
		}()
		defer <@$.ctx.name>.After(c, w, r)
		if res := <@$.ctx.name>.Before(c, w, r); res != nil {
			h = res
			return
		}
		if res<@$.ctx.controller.IgnoredArgs $f> := c.<@$f.Name>(<@range $i, $v := $f.Params>
				<@$.ctx.strconv.Render "strconv" "r.Form" $v>,
		<@end>); res != nil {
			h = res
			return
		}
	}

<@end>

<@if not .ctx.num>
	// Init initializes controllers of "<@.ctx.import>",
	// its parents, and returns a list of routes along
	// with handler functions associated with them.
	func Init() (routes []struct{
		Method, Pattern string
		Handler         http.HandlerFunc
	}){
		<@range $name, $v := .ctx.controllers>
			routes = append(routes, init<@$name>()...)
		<@end>
		<@if .ctx.initFunc>
			contr.Init(context)
		<@end>
		return
	}
<@end>

func init<@.ctx.name>() (rs []struct{
		Method, Pattern string
		Handler         http.HandlerFunc
	}){<@range $i, $v := .ctx.parents><@if $v.Import>
		rs = append(rs, <@$v.Package ".">Init()...)
	<@end><@end><@range $i, $f := .ctx.controller.Actions>
		context.Add("<@$.ctx.name>", "<@$f.Name>")
	<@end><@if .ctx.controller.Routes>rs = append(rs, []struct{
		Method, Pattern string
		Handler         http.HandlerFunc
	}{<@range $i, $v := .ctx.controller.Routes><@range $j, $sv := $v>
		{
			Method: "<@$sv.Method>",
			Pattern: "<@$sv.Pattern>",
			Handler: <@$sv.HandlerName>,
		},
	<@end><@end>}...)<@end>
	return
}

func init() {
	_ = strconv.MeaningOfLife
}

<@/*Below are subtemplates that are used by handlers.go.template.*/>

<@/*Get a slice of strings and print it (every one on a new line).*/>
<@define "printComments"><@if .comments>
	//<@range $i, $v := .comments>
<@$v><@end><@end><@end>
