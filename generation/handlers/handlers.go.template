// Package <@.ctx.package> is generated automatically by Sunplate toolkit.
// Please, do not edit it manually.
package <@.ctx.package>

import (
	"net/http"

:	<@range $i, $v := .ctx.parents>\
:	:	<@if $v.Import>\
:	:		<@$v.Package> "<@join $.ctx.outputImport $v.Import>"
:	:	<@end>\
:	<@end>\
	contr "<@.ctx.import>"

	a "<@.ctx.actionImport>"
	"github.com/anonx/sunplate/strconv"
)

// <@.ctx.name> is automatically generated from a controller
// that was found at "<@.ctx.import>/<@.ctx.file>".
<@template "printComments" dict (set "comments" .ctx.controller.Comments)>\
type <@.ctx.name> struct {
}

// New allocates (<@.ctx.import>).<@.ctx.name> controller,
<@if .ctx.parents>\
// initializes its parents; then returns the controller.
<@else>\
// then returns it.
<@end>\
func (t <@.ctx.name>) New() *contr.<@.ctx.name> {
	c := &contr.<@.ctx.name>{}
:	<@range $i, $v := .ctx.parents>\
:		c.<@$v.Name> = <@$v.Package "."><@$v.Name>{}.New()
:	<@end>\
	return c
}

<@template "magicActionComments" dict (set "name" .ctx.before) (set "import" .ctx.import) (set "type" .ctx.name) (set "parents" .ctx.parents) (set "self" .ctx.controller.Before)>\
<@template "startMagicActionDecl" dict (set "type" .ctx.name) (set "name" .ctx.before) (set "result" .ctx.actionInterface)>\
<@template "callParents" dict (set "name" .ctx.before) (set "parents" .ctx.parents)>\
<@template "callSelf" dict (set "name" .ctx.before) (set "import" .ctx.import) (set "type" .ctx.name) (set "strconv" .ctx.strconv) (set "self" .ctx.controller.Before)>\
<@template "endMagicActionDecl">\

<@template "magicActionComments" dict (set "name" .ctx.after) (set "import" .ctx.import) (set "type" .ctx.name) (set "parents" .ctx.parents) (set "self" .ctx.controller.After)>\
<@template "startMagicActionDecl" dict (set "type" .ctx.name) (set "name" .ctx.after) (set "result" .ctx.actionInterface)>\
<@template "callParents" dict (set "name" .ctx.after) (set "parents" .ctx.parents)>\
<@template "callSelf" dict (set "name" .ctx.after) (set "import" .ctx.import) (set "type" .ctx.name) (set "strconv" .ctx.strconv) (set "self" .ctx.controller.After)>\
<@template "endMagicActionDecl">\

func init() {
	_ = strconv.MeaningOfLife
}\
<@define "magicActionComments">\
:	<@if not (or .parents .self)>\
:	:	// <@.name> is a dump function that always returns nil.
:	<@end>\
:	<@if .parents>\
:	:	// <@.name> executes magic actions of embedded controllers<@if .self>, and<@else>.<@end>
:	<@end>\
:	<@if .self>\
:	:	// <@if not .parents><@.name> <@end>calls (<@.import>).<@.type>.<@.name> with arguments
:	:	// that are extracted from r.Form and converted to appropriate types.
:	<@end>\
<@end>\
<@define "startMagicActionDecl">\
:	func (t <@.type>) <@.name>(c *contr.<@.type>, w http.ResponseWriter, r *http.Request) a.<@.result> {
<@end>\
<@define "endMagicActionDecl">\
:		// Continue execution chain.
:		return nil
:	}
<@end>\
<@define "callParents">\
:	<@if .parents>\
:		// Execute magic <@.name> actions of embedded controllers.
:	:	<@range $i, $v := .parents>\
:	:		if r := (<@$v.Package "."><@$v.Name>{}.After(c.<@$v.Name>, w, r)); r != nil {
:	:			return r
:	:		}
:	:	<@end>\
:	<@end>\
<@end>\
<@define "callSelf">\
:	<@if .self>\
:		// Call magic <@.name> action of (<@.import>).<@.type>.
:		if r := c.<@.name>( // Parameters should be binded.
:	:	:	<@range $i, $v := .self.Params>\
:	:			<@$.strconv.Render "strconv" "r.Form" $v>,
:	:	:	<@end>\
:		); r != nil {
:			return r
:		}
:	<@end>\
<@end>\
\
<@define "printComments">\
:	<@if .comments>//
:	:	<@range $i, $v := .comments>\
:	:	:	<@$v>
:	:	<@end>\
:	<@end>\
<@end>\
